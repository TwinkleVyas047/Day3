class InsertionDoubly{
    Node head;

class Node{
    int data;
    Node prev;
    Node next;

    Node(int d){
        data=d;
    }
}

public void push(int new_data){
    Node new_node=new Node(new_data);

    new_node.next=head;
    new_node.prev=null;

    if(head!=null)
    head.prev=new_node;

    head=new_node;
}

 // Given a node as prev_node, insert a new node after the given node 
public void InsertAfter(Node prev_Node, int new_data)
    {
 
        
        if (prev_Node == null) {
            System.out.println(
                "The given previous node cannot be NULL ");
            return;
        }
 
       
        Node new_node = new Node(new_data);
 

        new_node.next = prev_Node.next;
 
        
        prev_Node.next = new_node;
 
        
        new_node.prev = prev_Node;
 
        
        if (new_node.next != null)
            new_node.next.prev = new_node;
    }

 // Given a node as prev_node, insert a new node after the given node
public void InsertBefore(Node next_node, int new_data){

    if(next_node==null){
        System.out.println("next node can not be NULL");
        return;
    }
    Node new_node=new Node(new_data);

    new_node.prev=next_node.prev;

    next_node.prev=new_node;

    new_node.next=next_node;

    if(new_node.prev!=null)
        new_node.prev.next=new_node;
    else
        head=new_node;
}

//Add a node at the end of the list
void append(int new_data)
{
     Node new_node=new Node(new_data);

     Node last=head;

     new_node.next=null;

     if(head==null){
        new_node.prev=null;
        head=new_node;
        return;
     }
     while(last.next!=null)
        last=last.next;
        last.next=new_node;
        new_node.prev=last;
}

//function to print linked list starting from the given node
        public void printlist(Node node){
            Node last=null;
            System.out.println("Traverse in forward direction");
            
            while(node!=null){
                System.out.print(node.data+" ");
                last=node;
                node=node.next;
            }
            System.out.println();
            System.out.println("Traverse in Reverse order");

            while(last!=null){
                System.out.println(last.data+" ");
                last=last.prev;
            }
        }

        public static void main(String args[]){
            InsertionDoubly dll=new InsertionDoubly();

            dll.append(6);

            dll.push(7);

            dll.push(1);

            dll.append(4);

            dll.InsertAfter(dll.head.next, 8);

            System.out.println("Created Doubly Linked List");
            dll.printlist(dll.head);
        }
    }
